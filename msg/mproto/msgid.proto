syntax = "proto3";

package mproto;

// 消息ID
enum MessageID {
    MSG_PING = 0; // c-s 发送ping  1
    MSG_PONG = 1; // s-c 发送 pong 1

    // REQ AND RESP
    MSG_LOGIN = 100; // c-s 登录 1
    MSG_LOGIN_RESP = 200; // s-c 登录返回 1

    MSG_ENTER_ROOM = 101; // c-s 进入房间

    MSG_GET_LANDLORD_DO = 102; // c-s 玩家叫地主阶段操作
    MSG_OUT_CARD_DO = 103; // c-s // 玩家出牌

    MSG_EXIT_ROOM = 104; // 退出房间

    MSG_GAME_HOSTING = 105; // 托管请求
    MSG_GAME_HOSTING_RESP = 205; // 托管请求返回

    MSG_CHECK_ROOM = 106; // 检查这个房间是否能进
    MSG_CHECK_ROOM_RESP = 206; // 检查房间是否能进返回

    MSG_SEND_MSG = 107; // 发送消息请求
    MSG_SEND_MSG_RESP = 207; // 发送消息请求返回

    MSG_PROMPT_MSG = 108; // 提示
    MSG_PROMPT_MSG_RESP = 109; // 提示返回

    /* SERVER PUSH  MSG - FROM 300 */
    MSG_ROOM_CLASSIFY_PUSH = 300; // 推送房间分类信息  用户登录认证成功之后 推送
    MSG_ROOM_PLAYER_PUSH = 301; // 推送房间信息  用户当玩家成功匹配时候 推送
    MSG_START_GAME_PUSH = 302; // 开始游戏推送 // 发牌

    MSG_GET_LANDLORD_PUSH = 303; // 抢地主推送
    MSG_LANDLORD_PUSH = 304; // 谁是地主推送
    MSG_PLAY_CARD_PUSH = 305; // 开始打牌逻辑
    MSG_SETTLEMENT_PUSH = 306; // 结算

    MSG_ROOM_RECOVER_PUSH = 307; // 玩家在玩的过程中 退出房间  在进入 的房间数据信息推送  new
    MSG_CARD_COUNT_PUSH = 308; // 记牌器推送
    MSG_CARD_UPDATE_PUSH = 309; // 更新手牌

    /* SERVER PUSH ERROR MSG - FROM 500 */
    MSG_CLOSE_CONN_PUSH = 500; // s-c 服务器主动断开
    MSG_ERR_MSG_PUSH = 501; // s-c 错误信息推送
}
